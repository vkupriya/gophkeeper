// Code generated by MockGen. DO NOT EDIT.
// Source: internal/proto/service_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/vkupriya/gophkeeper/internal/proto"
	grpc "google.golang.org/grpc"
)

// MockGophKeeperClient is a mock of GophKeeperClient interface.
type MockGophKeeperClient struct {
	ctrl     *gomock.Controller
	recorder *MockGophKeeperClientMockRecorder
}

// MockGophKeeperClientMockRecorder is the mock recorder for MockGophKeeperClient.
type MockGophKeeperClientMockRecorder struct {
	mock *MockGophKeeperClient
}

// NewMockGophKeeperClient creates a new mock instance.
func NewMockGophKeeperClient(ctrl *gomock.Controller) *MockGophKeeperClient {
	mock := &MockGophKeeperClient{ctrl: ctrl}
	mock.recorder = &MockGophKeeperClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGophKeeperClient) EXPECT() *MockGophKeeperClientMockRecorder {
	return m.recorder
}

// AddSecret mocks base method.
func (m *MockGophKeeperClient) AddSecret(ctx context.Context, in *proto.AddSecretRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSecret", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSecret indicates an expected call of AddSecret.
func (mr *MockGophKeeperClientMockRecorder) AddSecret(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecret", reflect.TypeOf((*MockGophKeeperClient)(nil).AddSecret), varargs...)
}

// DeleteSecret mocks base method.
func (m *MockGophKeeperClient) DeleteSecret(ctx context.Context, in *proto.DeleteSecretRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSecret", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockGophKeeperClientMockRecorder) DeleteSecret(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockGophKeeperClient)(nil).DeleteSecret), varargs...)
}

// GetSecret mocks base method.
func (m *MockGophKeeperClient) GetSecret(ctx context.Context, in *proto.GetSecretRequest, opts ...grpc.CallOption) (*proto.GetSecretResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecret", varargs...)
	ret0, _ := ret[0].(*proto.GetSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockGophKeeperClientMockRecorder) GetSecret(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockGophKeeperClient)(nil).GetSecret), varargs...)
}

// ListSecrets mocks base method.
func (m *MockGophKeeperClient) ListSecrets(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.ListSecretsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecrets", varargs...)
	ret0, _ := ret[0].(*proto.ListSecretsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockGophKeeperClientMockRecorder) ListSecrets(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockGophKeeperClient)(nil).ListSecrets), varargs...)
}

// Login mocks base method.
func (m *MockGophKeeperClient) Login(ctx context.Context, in *proto.User, opts ...grpc.CallOption) (*proto.UserAuthToken, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*proto.UserAuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockGophKeeperClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockGophKeeperClient)(nil).Login), varargs...)
}

// Register mocks base method.
func (m *MockGophKeeperClient) Register(ctx context.Context, in *proto.User, opts ...grpc.CallOption) (*proto.UserAuthToken, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*proto.UserAuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockGophKeeperClientMockRecorder) Register(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockGophKeeperClient)(nil).Register), varargs...)
}

// UpdateSecret mocks base method.
func (m *MockGophKeeperClient) UpdateSecret(ctx context.Context, in *proto.UpdateSecretRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSecret", varargs...)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockGophKeeperClientMockRecorder) UpdateSecret(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockGophKeeperClient)(nil).UpdateSecret), varargs...)
}

// MockGophKeeperServer is a mock of GophKeeperServer interface.
type MockGophKeeperServer struct {
	ctrl     *gomock.Controller
	recorder *MockGophKeeperServerMockRecorder
}

// MockGophKeeperServerMockRecorder is the mock recorder for MockGophKeeperServer.
type MockGophKeeperServerMockRecorder struct {
	mock *MockGophKeeperServer
}

// NewMockGophKeeperServer creates a new mock instance.
func NewMockGophKeeperServer(ctrl *gomock.Controller) *MockGophKeeperServer {
	mock := &MockGophKeeperServer{ctrl: ctrl}
	mock.recorder = &MockGophKeeperServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGophKeeperServer) EXPECT() *MockGophKeeperServerMockRecorder {
	return m.recorder
}

// AddSecret mocks base method.
func (m *MockGophKeeperServer) AddSecret(arg0 context.Context, arg1 *proto.AddSecretRequest) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecret", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSecret indicates an expected call of AddSecret.
func (mr *MockGophKeeperServerMockRecorder) AddSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecret", reflect.TypeOf((*MockGophKeeperServer)(nil).AddSecret), arg0, arg1)
}

// DeleteSecret mocks base method.
func (m *MockGophKeeperServer) DeleteSecret(arg0 context.Context, arg1 *proto.DeleteSecretRequest) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockGophKeeperServerMockRecorder) DeleteSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockGophKeeperServer)(nil).DeleteSecret), arg0, arg1)
}

// GetSecret mocks base method.
func (m *MockGophKeeperServer) GetSecret(arg0 context.Context, arg1 *proto.GetSecretRequest) (*proto.GetSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockGophKeeperServerMockRecorder) GetSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockGophKeeperServer)(nil).GetSecret), arg0, arg1)
}

// ListSecrets mocks base method.
func (m *MockGophKeeperServer) ListSecrets(arg0 context.Context, arg1 *proto.Empty) (*proto.ListSecretsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", arg0, arg1)
	ret0, _ := ret[0].(*proto.ListSecretsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockGophKeeperServerMockRecorder) ListSecrets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockGophKeeperServer)(nil).ListSecrets), arg0, arg1)
}

// Login mocks base method.
func (m *MockGophKeeperServer) Login(arg0 context.Context, arg1 *proto.User) (*proto.UserAuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*proto.UserAuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockGophKeeperServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockGophKeeperServer)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockGophKeeperServer) Register(arg0 context.Context, arg1 *proto.User) (*proto.UserAuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*proto.UserAuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockGophKeeperServerMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockGophKeeperServer)(nil).Register), arg0, arg1)
}

// UpdateSecret mocks base method.
func (m *MockGophKeeperServer) UpdateSecret(arg0 context.Context, arg1 *proto.UpdateSecretRequest) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockGophKeeperServerMockRecorder) UpdateSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockGophKeeperServer)(nil).UpdateSecret), arg0, arg1)
}

// mustEmbedUnimplementedGophKeeperServer mocks base method.
func (m *MockGophKeeperServer) mustEmbedUnimplementedGophKeeperServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGophKeeperServer")
}

// mustEmbedUnimplementedGophKeeperServer indicates an expected call of mustEmbedUnimplementedGophKeeperServer.
func (mr *MockGophKeeperServerMockRecorder) mustEmbedUnimplementedGophKeeperServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGophKeeperServer", reflect.TypeOf((*MockGophKeeperServer)(nil).mustEmbedUnimplementedGophKeeperServer))
}

// MockUnsafeGophKeeperServer is a mock of UnsafeGophKeeperServer interface.
type MockUnsafeGophKeeperServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeGophKeeperServerMockRecorder
}

// MockUnsafeGophKeeperServerMockRecorder is the mock recorder for MockUnsafeGophKeeperServer.
type MockUnsafeGophKeeperServerMockRecorder struct {
	mock *MockUnsafeGophKeeperServer
}

// NewMockUnsafeGophKeeperServer creates a new mock instance.
func NewMockUnsafeGophKeeperServer(ctrl *gomock.Controller) *MockUnsafeGophKeeperServer {
	mock := &MockUnsafeGophKeeperServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeGophKeeperServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeGophKeeperServer) EXPECT() *MockUnsafeGophKeeperServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedGophKeeperServer mocks base method.
func (m *MockUnsafeGophKeeperServer) mustEmbedUnimplementedGophKeeperServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGophKeeperServer")
}

// mustEmbedUnimplementedGophKeeperServer indicates an expected call of mustEmbedUnimplementedGophKeeperServer.
func (mr *MockUnsafeGophKeeperServerMockRecorder) mustEmbedUnimplementedGophKeeperServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGophKeeperServer", reflect.TypeOf((*MockUnsafeGophKeeperServer)(nil).mustEmbedUnimplementedGophKeeperServer))
}
